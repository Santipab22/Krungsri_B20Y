import librosa
import pandas as pd
import streamlit as st
from tensorflow.keras.models import load_model
import numpy as np

# Load your models
model = load_model('lstm_model.h5')
model_f = load_model('lstm_model_filter.h5')

# Function to convert audio to DataFrame
def audio_to_dataframe(filename):
    y, sr = librosa.load(filename)
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=128)
    df = pd.DataFrame(mfccs.T)
    return df

def predict_class(df, model):
    X = df.values
    X = X.reshape((X.shape[0], 1, X.shape[1]))  # Reshape to match model input
    pred = model.predict(X)
    most_common_class = np.argmax(np.sum(pred, axis=0))
    return most_common_class

# Streamlit interface
st.title("üéôÔ∏è Baby Cry Identification üë∂")

# List of allowed sound file extensions
allowed_extensions = ["wav", "mp3", "ogg", "flac", "m4a", "aac", "wma", "aiff", "alac", "opus"]

# Upload audio file
uploaded_file = st.file_uploader("Upload a sound file", type=allowed_extensions)

if uploaded_file is not None:
    # Display the uploaded audio file
    st.audio(uploaded_file)

    # Convert audio to DataFrame and display
    df = audio_to_dataframe(uploaded_file)

    # Make prediction and display result
    class_mapping_f = ['cry', 'silence', 'noise', 'laugh']
    predicted_class = predict_class(df, model_f)
    predict_filter = class_mapping_f[predicted_class]

    if predict_filter == "cry":
        class_mapping = ['hungry', 'tired', 'burping', 'belly_pain', 'discomfort']
        predicted_class = predict_class(df, model)
        predicted_class = class_mapping[predicted_class]

        if predicted_class == 'hungry':
            st.markdown(
                """
                <div style='border: 2px solid blue; border-radius: 5px; padding: 5px; background-color: white;'>
                    <h3 style='text-align: center; color: green; font-size: 180%'> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¥‡∏ß </h3>
                </div>
                """, unsafe_allow_html=True
            )
            st.write("‡∏•‡∏π‡∏Å‡∏à‡∏∞‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏î‡∏π‡∏î‡∏õ‡∏≤‡∏Å‡∏î‡∏π‡∏î‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Å‡∏¥‡∏ô‡∏ô‡∏°‡∏ó‡∏∏‡∏Å 2 - 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏ô‡∏ó‡∏≤‡∏£‡∏Å‡πÅ‡∏£‡∏Å‡πÄ‡∏Å‡∏¥‡∏î ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏´‡∏¥‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡πá‡∏à‡∏∞‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡πÇ‡∏ß‡∏¢‡∏ß‡∏≤‡∏¢ ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡∏´‡∏¥‡∏ß‡∏°‡∏≤‡∏Å‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏ô‡∏∞")
        elif predicted_class == 'tired':
            st.markdown(
                """
                <div style='border: 2px solid blue; border-radius: 5px; padding: 5px; background-color: white;'>
                    <h3 style='text-align: center; color: green; font-size: 180%'> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ </h3>
                </div>
                """, unsafe_allow_html=True
            )
            st.write("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏•‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏´‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏õ‡∏•‡∏≠‡∏ö‡πÇ‡∏≠‡πã‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î")
        elif predicted_class == 'burping':
            st.markdown(
                """
                <div style='border: 2px solid blue; border-radius: 5px; padding: 5px; background-color: white;'>
                    <h3 style='text-align: center; color: green; font-size: 180%'> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏≠ </h3>
                </div>
                """, unsafe_allow_html=True
            )
            st.write("‡∏à‡∏±‡∏ö‡∏•‡∏π‡∏Å‡πÄ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏¥‡∏ô‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏¥‡∏ô‡∏ô‡∏° ‡∏ó‡∏≤‡∏°‡∏´‡∏≤‡∏´‡∏¥‡∏á‡∏Ñ‡πå ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ô‡∏°‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏°‡∏µ‡∏•‡∏°‡πÉ‡∏ô‡∏ó‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ñ‡∏±‡πà‡∏ß ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Å‡∏¥‡∏ô‡∏ô‡∏°‡∏ú‡∏á‡∏Å‡πá‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢")
        elif predicted_class == 'belly_pain':
            st.markdown(
                """
                <div style='border: 2px solid blue; border-radius: 5px; padding: 5px; background-color: white;'>
                    <h3 style='text-align: center; color: green; font-size: 180%'> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á </h3>
                </div>
                """, unsafe_allow_html=True
            )
            st.write("‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏Ç‡πâ ‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô ‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∞‡∏™‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏™‡πà‡∏≤‡∏¢ ‡∏Å‡∏¥‡∏ô‡∏ô‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á ‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡∏á‡∏≠‡πÅ‡∏á ‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡∏û‡∏≤‡∏•‡∏π‡∏Å‡∏´‡∏≤‡∏´‡∏°‡∏≠")
        elif predicted_class == 'discomfort':
            st.markdown(
                """
                <div style='border: 2px solid blue; border-radius: 5px; padding: 5px; background-color: white;'>
                    <h3 style='text-align: center; color: green; font-size: 180%'> ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î </h3>
                </div>
                """, unsafe_allow_html=True
            )
            st.write("‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏´‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ö‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≠")
    else:
        st.markdown(
            """
            <div style='border: 2px solid red; border-radius: 5px; padding: 5px; background-color: white;'>
                <h3 style='text-align: center; color: red; font-size: 180%'> ‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å ‚ùå </h3>
            </div>
            """, unsafe_allow_html=True
        )
